#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include "socket.h"
#include "irc.h"

#suite irc bot
#tcase sockets & irc

int sock, fd;
char test_buffer[BUFSIZE];

void open_socket(void) {

	sock = sock_connect(SERVER, PORT);
}

void close_socket(void) {

	close(sock);
}

void open_file(void) {

	fd = open("test/input.txt", O_RDONLY);
}

void close_file(void) {

	close(fd);
}

#test socket_descriptor
	ck_assert_msg(sock >= 0, "Socket creation failed");

#test write_equal_size
	ssize_t n = sock_write(sock, "rofl", 4);
	ck_assert_msg(n == 4 || n == -1, "Unexpected amount of bytes sent");

#test write_smaller_size
	ssize_t n = sock_write(sock, "troll", 0);
	ck_assert_msg(n == 0 || n == -1, "Unexpected amount of bytes sent");

#test-signal(6) write_bigger_than_buffer_size
	sock_write(sock, "fail", 5);

#test-signal(6) write_negative_size
	sock_write(sock, "also fail", -1);

#test irc_connection
	Irc freenode = irc_connect(sock, NICK, USER);
	ck_assert_msg(freenode != NULL, "irc connection failed");

#tcase read & write
#test readbytes
	char c;
	int i;

	for (i = 0; sock_readbyte(fd, &c) > 0; i++)
		test_buffer[i] = c;
	test_buffer[i] = '\0';

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer);

#test readline
	char test_buffer2[BUFSIZE] = {0};

	lseek(fd, 0, SEEK_SET);
	while (sock_readline(fd, test_buffer, BUFSIZE) > 0)
		strcat(test_buffer2, test_buffer);

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer2);


#main-pre
	tcase_add_unchecked_fixture(tc1_1, open_socket, close_socket);
	tcase_add_unchecked_fixture(tc1_2, open_file, close_file);
