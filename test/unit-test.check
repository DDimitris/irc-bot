#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include "socket.h"
#include "irc.h"
#include "wrappers.h"

struct irc_type {
	int sock;
	char address[SERVLEN];
	char port[PORTLEN];
	char nick[NICKLEN];
	char user[USERLEN];
	char channel[CHANLEN];
};

Irc server;
char test_buffer[BUFSIZE + 1];
int sock, status;
Parsed_data pdata;

void open_read(void) {

	server = select_server(0);
	server->sock = open("test/input.txt", O_RDONLY);
	if (server->sock < 0)
		exit_msg("Failed to open file");
	lseek(server->sock, 0, SEEK_SET);
}

void close_read(void) {

	close(server->sock);
}

void open_write(void) {

	server = select_server(0);
	server->sock = open("test/output.txt", O_RDWR);
	if (server->sock < 0)
		exit_msg("Failed to open file");
	lseek(server->sock, 0, SEEK_SET);
	pdata = calloc_wrap(sizeof(struct parse_type));
}

void close_write(void) {

	free(pdata);
	quit_server(server);
}

/*****************************************************************************/

#suite irc bot
#tcase connection
#test socket_connection

	sock = sock_connect("chat.freenode.net", "6667");
	ck_assert_msg(sock >= 0, "Socket creation failed");
	close(sock);

#test irc_connection

	server = select_server(0);
	status = connect_server(server);
	ck_assert_msg(status >= 0, "irc connection failed");
	quit_server(server);

/*****************************************************************************/

#tcase socket read operations
#test socket_readbytes

	char c;
	int i;

	for (i = 0; sock_readbyte(server->sock, &c) > 0; i++)
		test_buffer[i] = c;
	test_buffer[i] = '\0';

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer);

#test socket_readline

	char test_buffer2[BUFSIZE + 1] = { 0 };

	lseek(server->sock, 0, SEEK_SET);
	while (sock_readline(server->sock, test_buffer, BUFSIZE) > 0)
		strcat(test_buffer2, test_buffer);

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer2);

#test irc_readline

	char test_buffer2[BUFSIZE + 1] = { 0 };

	lseek(server->sock, 0, SEEK_SET);
	while (get_line(server, test_buffer) > 0)
		strcat(test_buffer2, test_buffer);

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer2);

/*****************************************************************************/

#tcase socket write operations
#test write_equal_size


	lseek(server->sock, 0, SEEK_SET);
	ssize_t n = sock_write(server->sock, "rofl", 4);
	ck_assert_msg(n == 4 || n == -1, "Unexpected amount of bytes sent");

#test write_smaller_size

	ssize_t n = sock_write(server->sock, "troll", 0);
	ck_assert_msg(n == 0 || n == -1, "Unexpected amount of bytes sent");

#test set_nick_null

	strncpy(test_buffer, server->nick, NICKLEN);
	set_nick(server, NULL);
	ck_assert_str_eq(server->nick, test_buffer);

#test new_nick_match

	set_nick(server, "trololol");
	ck_assert_str_eq(server->nick, "trololol");

#test set_user_null

	strncpy(test_buffer, server->user, USERLEN);
	set_user(server, NULL);
	ck_assert_str_eq(server->user, test_buffer);

#test new_user_match

	set_user(server, "botbot");
	ck_assert_str_eq(server->user, "botbot");

#test set_chan_null

	strncpy(test_buffer, server->channel, CHANLEN);
	join_channel(server, NULL);
	ck_assert_str_eq(server->channel, test_buffer);

#test new_chan_match

	join_channel(server, "random5322");
	ck_assert_str_eq(server->channel, "random5322");

#test parse_msg

	char msg[] = ":freestyl3r!~free@ppp005055033225.access.hol.gr PRIVMSG #foss-teimes :freestylerbot";

	pdata = parse_line(msg);
	if (pdata == NULL)
		ck_abort_msg("parsing failed");

	status = lseek(server->sock, 0, SEEK_SET);
	if (status < 0)
		perror("lseek");

	sprintf(test_buffer, "%s%s%s%s", pdata->nick, pdata->command, pdata->target, pdata->message);
	ck_assert_str_eq(test_buffer, "freestyl3rPRIVMSG#foss-teimesfreestylerbot");

#test sendmsg

	char msg[] = ":freestyl3r!~free@ppp005055033225.access.hol.gr PRIVMSG #foss-teimes :freestylerbot";

	pdata = parse_line(msg);
	send_message(server, pdata->target, "sup %s?", pdata->nick);
	lseek(server->sock, 0, SEEK_SET);
	sock_readline(server->sock, test_buffer, BUFSIZE);
	ck_assert_str_eq(test_buffer, "PRIVMSG #foss-teimes :sup freestyl3r?\r\n");

/*****************************************************************************/

#main-pre
	tcase_add_unchecked_fixture(tc1_2, open_read, close_read);
	tcase_add_unchecked_fixture(tc1_3, open_write, close_write);