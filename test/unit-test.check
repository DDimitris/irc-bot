#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <curl/curl.h>
#include "socket.h"
#include "irc.h"
#include "gperf.h"
#include "helper.h"
#include "bot.h"
#include "curl.h"

struct irc_type {
	int sock;
	char address[SERVLEN];
	char port[PORTLEN];
	char nick[NICKLEN];
	char user[USERLEN];
	char channel[CHANLEN];
};

Irc server;
char test_buffer[IRCLEN + 1];
int sock, status;
Parsed_data pdata;

ssize_t sock_readbyte(int sock, char *byte);
size_t curl_write_memory(char *data, size_t size, size_t elements, void *membuf);

void open_read(void) {

	server = malloc_w(sizeof(struct irc_type));
	server->sock = open("test/input.txt", O_RDONLY);
	if (server->sock < 0)
		exit_msg("Failed to open file");
}

void close_read(void) {

	free(server);
}

void open_write(void) {

	server = malloc_w(sizeof(struct irc_type));
	server->sock = open("test/output.txt", O_RDWR);
	if (server->sock < 0)
		exit_msg("Failed to open file");

	lseek(server->sock, 0, SEEK_SET);
	pdata = malloc_w(sizeof(*pdata));
}

void close_write(void) {

	free(pdata);
	quit_server(server, NULL);
}

/*****************************************************************************/

#suite irc bot
#tcase connection
#test socket_connection

	sock = sock_connect("chat.freenode.net", "6667");
	ck_assert_msg(sock >= 0, "Socket creation failed");
	close(sock);

#test irc_connection

	server = connect_server(0);
	ck_assert_msg(server != NULL, "irc connection failed");
	quit_server(server, NULL);

/*****************************************************************************/

#tcase socket read operations
#test socket_readbytes

	char c;
	int i;

	for (i = 0; sock_readbyte(server->sock, &c) > 0; i++)
		test_buffer[i] = c;
	test_buffer[i] = '\0';

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer);

#test socket_readline

	char test_buffer2[IRCLEN + 1] = { 0 };

	lseek(server->sock, 0, SEEK_SET);
	while (sock_readline(server->sock, test_buffer, IRCLEN) > 0)
		strcat(test_buffer2, test_buffer);

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer2);

#test irc_readline

	char test_buffer2[IRCLEN + 1] = { 0 };

	lseek(server->sock, 0, SEEK_SET);
	while (get_line(server, test_buffer) > 0)
		strcat(test_buffer2, test_buffer);

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer2);

/*****************************************************************************/

#tcase socket write operations
#test write_equal_size

	ssize_t n = sock_write(server->sock, "rofl", 4);
	ck_assert_msg(n == 4 || n == -1, "Unexpected amount of bytes sent");

#test write_smaller_size

	ssize_t n = sock_write(server->sock, "troll", 0);
	ck_assert_msg(n == 0 || n == -1, "Unexpected amount of bytes sent");

#test set_nick_null

	char *nick = set_nick(server, NULL);
	ck_assert_str_eq(server->nick, nick);

#test new_nick_match

	set_nick(server, "trololol");
	ck_assert_str_eq(server->nick, "trololol");

#test set_user_null

	char *user = set_user(server, NULL);
	ck_assert_str_eq(server->user, user);

#test new_user_match

	set_user(server, "trololol");
	ck_assert_str_eq(server->user, "trololol");

#test set_chan_null

	char *channel = join_channel(server, NULL);
	ck_assert_str_eq(server->channel, channel);

#test new_chan_match

	join_channel(server, "trololol");
	ck_assert_str_eq(server->channel, "trololol");

#test parse_msg

	char line[] = ":freestyl3r!~free@ppp005055033225.access.hol.gr PRIVEMSG #foss-teimes :freestylerbot";

	parse_line(server, line, pdata);
	sprintf(test_buffer, "%s%s%s", pdata->nick, pdata->command, pdata->message);
	ck_assert_str_eq(test_buffer, "freestyl3rPRIVEMSG#foss-teimes :freestylerbot");

#test privemsg

	char msg[] = "freestyl3r\0PRIVEMSG\0freestylerbot :@bot lol re";

	pdata->nick = &msg[0];
	pdata->command = &msg[11];
	pdata->message = &msg[20];

	irc_privmsg(server, pdata);
	sprintf(test_buffer, "%s%s%s%s", pdata->nick, pdata->target, pdata->command, pdata->message);
	ck_assert_str_eq(test_buffer, "freestyl3rfreestyl3rbotlol re");

#test pingreply

	char msg[] = "PING :pratchett.freenode.net\r\n";
	char *pong = ping_reply(server, msg);
	ck_assert_str_eq(pong, "PONG :pratchett.freenode.net\r\n");

/*****************************************************************************/

#tcase function match
#test gperf

	Function_list flist = function_lookup("bot", 3);
	ck_assert_ptr_ne(flist, NULL);

	flist = function_lookup("random", 6);
	ck_assert_ptr_eq(flist, NULL);

#test curl_writeback

	struct mem_buffer mem;
	char *data = "random stuff ftw!";
	curl_write_memory(data, strlen(data), 1, &mem);
	ck_assert_str_eq(data, mem.buffer);
	free(mem.buffer);

#test url_shortener_valid

	char *short_url = shorten_url("rofl.com");
	ck_assert_str_eq(short_url, "http://goo.gl/LJbW");
	free(short_url);

#test parameter_extraction

	char msg[] = " 	trolol  re noob  	\r\n";
	char **argv;
	int argc;

	argv = extract_params(msg, &argc);
	ck_assert_int_eq(argc, 3);
	ck_assert_str_eq(argv[0], "trolol");
	ck_assert_str_eq(argv[1], "re");
	ck_assert_str_eq(argv[2], "noob");

	free(argv);

#test mumble_list

	char *data = fetch_mumble_users();
	ck_assert_str_eq(data, "7 Online clients: Chubby ZED gkino Erevos freestyler charkost tomkap");

#test github_commits

	Github *commit;
	struct mem_buffer mem;
	int n = 10;

	commit = fetch_github_commits("foss-teimes/irc-bot", &n, &mem);

	ck_assert_str_eq(commit[0].sha, "8761f93");
	ck_assert_str_eq(commit[0].author, "freestyl3r");
	ck_assert_str_eq(commit[0].msg, "change a function name that conflicted with test framework");
	ck_assert_str_eq(commit[0].url, "https://github.com/foss-teimes/irc-bot/commit/8761f932675c562c0c9b1cef8470534945e896e5");
	ck_assert_str_eq(commit[1].sha, "c2513cf");
	ck_assert_str_eq(commit[1].author, "freestyl3r");
	ck_assert_str_eq(commit[1].msg, "Run bot commands in a new process");
	ck_assert_str_eq(commit[1].url, "https://github.com/foss-teimes/irc-bot/commit/c2513cf1046400414a267ccd09918afcc174f786");

	free(mem.buffer);

/*****************************************************************************/

#main-pre
	tcase_add_unchecked_fixture(tc1_2, open_read, close_read);
	tcase_add_unchecked_fixture(tc1_3, open_write, close_write);
	curl_global_init(CURL_GLOBAL_ALL);

#main-post
	curl_global_cleanup();
	return nf == 0 ? 0 : 1;